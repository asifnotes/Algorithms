#include <iostream>
#include <vector>
#include <stack>
#include <string>
 
using namespace std;
 
class Graph {
public:
    vector<vector<int>> adjList;
    vector<string> nodeNames;
    vector<bool> visited;
    stack<string> topologicalOrder;
 
    Graph(int n) {
        adjList.resize(n);
        nodeNames.resize(n);
        visited.resize(n, false);
    }
 
    void addEdge(int u, int v) {
        adjList[u].push_back(v);
    }
 
    void setNodeName(int index, const string& name) {
        nodeNames[index] = name;
    }
 
    void dfs(int v) {
        visited[v] = true;
        for (int neighbor : adjList[v]) {
            if (!visited[neighbor]) {
                dfs(neighbor);
            }
        }
        topologicalOrder.push(nodeNames[v]);
    }
 
    void topologicalSort() {
        for (int i = 0; i < adjList.size(); ++i) {
            if (!visited[i]) {
                dfs(i);
            }
        }
 
        while (!topologicalOrder.empty()) {
            cout << topologicalOrder.top() << " ";
            topologicalOrder.pop();
        }
        cout << endl;
    }
};
 
int main() {
    Graph g(6);
    g.setNodeName(0, "A");
    g.setNodeName(1, "B");
    g.setNodeName(2, "C");
    g.setNodeName(3, "D");
    g.setNodeName(4, "E");
    g.setNodeName(5, "F");
 
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(2, 3);
    g.addEdge(4, 5);
    g.addEdge(5, 2);
 
    cout << "Topological Sort: ";
    g.topologicalSort();
 
    return 0;
}
