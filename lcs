#include <iostream>
#include <string>
#include <iomanip>

using namespace std;
 
const int SIZE = 100;
 
// Function to print the LCS sequence using backtracking

void printLCS(char b[SIZE][SIZE], string X, int i, int j) {

    if (i == 0 || j == 0)

        return;
 
    if (b[i][j] == 'C') {

        printLCS(b, X, i - 1, j - 1);

        cout << X[i - 1];

    } else if (b[i][j] == 'U') {

        printLCS(b, X, i - 1, j);

    } else {

        printLCS(b, X, i, j - 1);

    }

}
 
// Function to print the combined LCS length and direction table

void printCombinedTable(int c[SIZE][SIZE], char b[SIZE][SIZE], int m, int n, string X, string Y) {

    cout << "\nCombined LCS Table (Format: [length, dir])\n\n";
 
    // Print column headers

    cout << setw(8) << " " << setw(8) << " ";

    for (int j = 0; j < n; j++)

        cout << setw(8) << Y[j];

    cout << "\n";
 
    for (int i = 0; i <= m; i++) {

        // Print row headers

        if (i == 0)

            cout << setw(8) << " ";

        else

            cout << setw(8) << X[i - 1];
 
        for (int j = 0; j <= n; j++) {

            if (i == 0 || j == 0)

                cout << setw(8) << "[0,  ]";

            else {

                string dir(1, b[i][j]); // convert char to string

                cout << setw(8) << "[" + to_string(c[i][j]) + "," + dir + "]";

            }

        }

        cout << endl;

    }

}
 
int main() {

    string X = "ABCBDAB";

    string Y = "BDCABA";

    int m = X.length();

    int n = Y.length();
 
    int c[SIZE][SIZE] = {0};

    char b[SIZE][SIZE] = {0};
 

    for (int i = 1; i <= m; i++) {

        for (int j = 1; j <= n; j++) {

            if (X[i - 1] == Y[j - 1]) {

                c[i][j] = c[i - 1][j - 1] + 1;

                b[i][j] = 'C'; // Diagonal

            } else if (c[i - 1][j] >= c[i][j - 1]) {

                c[i][j] = c[i - 1][j];

                b[i][j] = 'U'; // Up

            } else {

                c[i][j] = c[i][j - 1];

                b[i][j] = 'L'; // Left

            }

        }

    }
 

    printCombinedTable(c, b, m, n, X, Y);
 
    // Output the actual LCS

    cout << "\nLongest Common Subsequence: ";

    printLCS(b, X, m, n);

    cout << endl;
 
    return 0;

}
 
 
