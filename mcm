//mcm code 
#include <iostream>
#include <climits>
#include <iomanip>
#include <string>
 
using namespace std;
 
const int MAX = 10; 
 
void printOptimalParenthesis(int s[MAX][MAX], int i, int j, string name[MAX][MAX]) {
    if (i == j) {
        name[i][j] = "A" + to_string(i);
    } else {
        int k = s[i][j];
        printOptimalParenthesis(s, i, k, name);
        printOptimalParenthesis(s, k + 1, j, name);
        name[i][j] = "(" + name[i][k] + " x " + name[k + 1][j] + ")";
    }
}
 
int main() {
    int p[] = {5, 4, 6, 2, 7}; 
    int n = sizeof(p) / sizeof(p[0]) - 1;
 
    int m[MAX][MAX]; // Cost table
    int s[MAX][MAX]; // Split table
    string name[MAX][MAX]; 
 
    for (int i = 1; i <= n; i++)
        m[i][i] = 0;
 
    for (int l = 2; l <= n; l++) {
        for (int i = 1; i <= n - l + 1; i++) {
            int j = i + l - 1;
            m[i][j] = INT_MAX;
 
            for (int k = i; k < j; k++) {
                int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                cout << "Cost of A[" << i << "][" << j << "] with k=" << k << " => "
<< m[i][k] << " + " << m[k + 1][j] << " + ("
<< p[i - 1] << "*" << p[k] << "*" << p[j] << ") = " << q << endl;
 
                if (q < m[i][j]) {
                    m[i][j] = q;
                    s[i][j] = k;
                }
            }
        }
    }
 
    cout << "\nMinimum Cost Table (m[i][j]):\n";
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (j < i) cout << setw(6) << "-";
            else cout << setw(6) << m[i][j];
        }
        cout << endl;
    }
 
    printOptimalParenthesis(s, 1, n, name);
    cout << "\nOptimal Parenthesization: " << name[1][n] << endl;
    cout << "Minimum number of multiplications: " << m[1][n] << endl;
 
    return 0;
}
